{"version":3,"sources":["components/Header.jsx","components/IncomeExpense.jsx","components/Balance.jsx","components/AddTransaction.jsx","components/Transaction.jsx","components/Transactions.jsx","App.js","serviceWorker.js","index.js"],"names":["Header","className","IncomeExpense","amounts","incomeTotal","filter","amount","reduce","acc","posAmount","expenseTotal","negAmount","oldAmount","Balance","newAmount","props","useSpring","to","from","useEffect","span","interpolate","x","Math","floor","AddTransaction","handleAddTransaction","generateID","random","useState","id","description","newTransaction","setNewTransaction","onSubmit","e","preventDefault","type","value","onChange","target","placeholder","disabled","isNaN","Transaction","transaction","handleDeleteTransaction","sign","showButton","setShowButton","onMouseOver","onMouseLeave","abs","onClick","Transactions","children","mockTransactionList","App","transactionList","setTransactionList","setAmounts","transitions","useTransition","opacity","marginLeft","enter","leave","trail","map","parseInt","localStorage","setItem","JSON","stringify","length","item","key","div","style","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.3bb3d032.chunk.js","sourcesContent":["import React from 'react'\n\nexport const Header = () => {\n    return (\n        <div>\n            <header className=\"App-header\">\n                <h1>React Budget App</h1>\n            </header>\n        </div>\n    )\n}\n","import React from 'react'\n\nexport const IncomeExpense = ({ amounts }) => {\n    const incomeTotal = amounts.filter(amount => amount > 0).reduce(((acc, posAmount) => acc += posAmount), 0)\n    const expenseTotal = amounts.filter(amount => amount < 0).reduce(((acc, negAmount) => acc += negAmount), 0)\n    // console.log(incomeTotal, expenseTotal)\n    return (\n        <div className=\"income-expense-total\">\n            <div className=\"income-total\">\n                <p>Income Total</p>\n                <p>{incomeTotal}</p>\n            </div>\n            <div className=\"expense-total\">\n                <p>Expense Total</p>\n                <p>{expenseTotal}</p>\n            </div>\n        </div>\n    )\n}\n","import React, { useEffect } from 'react'\nimport { useSpring, animated } from \"react-spring\";\nimport { IncomeExpense } from \"./IncomeExpense\"\n\nlet oldAmount = 0;\n\nexport const Balance = ({ amounts }) => {\n    const newAmount = amounts.reduce(((acc, amount) => acc += amount), 0)\n    const props = useSpring({ to: { newAmount }, from: { oldAmount } });\n\n    useEffect(() => {\n        oldAmount = newAmount\n    }, [newAmount])\n    \n    return (\n        <div className=\"balance\">\n            <h3>Balance</h3>\n            <h2 className=\"balance-number\">$ <animated.span>{props.newAmount.interpolate(x => Math.floor(x))}</animated.span></h2>\n            <IncomeExpense amounts={amounts} />\n        </div>\n    )\n}\n","import React, { useState } from \"react\";\n\nexport const AddTransaction = ({ handleAddTransaction }) => {\n  const generateID = () => Math.floor(Math.random() * 1000000);\n  const [newTransaction, setNewTransaction] = useState({\n    id: generateID(),\n    description: \"\",\n    amount: \"\"\n  });\n  const onSubmit = e => {\n    e.preventDefault();\n    handleAddTransaction(newTransaction);\n    setNewTransaction({ id: generateID(), description: \"\", amount: \"\" });\n  };\n\n  return (\n    <div className=\"add-transaction\">\n      {/* <h3>Add Income / Expense</h3> */}\n      <form onSubmit={onSubmit}>\n        <input\n          type=\"text\"\n          value={newTransaction.description}\n          onChange={e =>\n            setNewTransaction({\n              ...newTransaction,\n              description: e.target.value\n            })\n          }\n          placeholder=\"Enter a description of your transaction\"\n        />\n        <input\n          type=\"text\"\n          value={newTransaction.amount}\n          onChange={e =>\n            setNewTransaction({ ...newTransaction, amount: e.target.value })\n          }\n          placeholder=\"Enter a positive or negative number\"\n        />\n        <button\n          className=\"add-button\"\n          type=\"submit\"\n          disabled={(newTransaction.description !== \"\" && newTransaction.amount !== \"\" && !isNaN(newTransaction.amount)) ? false : true}\n        >\n          Add</button>\n      </form>\n    </div>\n  );\n};\n","import React, { useState } from 'react';\n// import { useSpring, animated } from 'react-spring';\n\nexport const Transaction = ({ transaction, handleDeleteTransaction }) => {\n    const sign = transaction.amount > 0 ? \"+\" : \"-\";\n    const [showButton, setShowButton] = useState(false);\n    const deleteTransaction = () => {\n        handleDeleteTransaction(transaction.id);\n    }\n    return (\n        <li\n            onMouseOver={() => setShowButton(true)}\n            onMouseLeave={() => setShowButton(false)}\n            className={sign === \"+\" ? \"transaction pos-transaction\" : \"transaction neg-transaction\"}>\n            <p className=\"transaction-description\">{transaction.description}</p>\n            <p className={sign === \"+\" ? \"transaction-amount green-text\" : \"transaction-amount red-text\"}>{sign}${Math.abs(transaction.amount)}</p>\n\n            {showButton && <button\n                className=\"delete-button\"\n                onClick={deleteTransaction}\n            >-</button>}\n        </li>\n    )\n}\n","import React from 'react'\n\nexport const Transactions = (props) => {\n    return (\n        <div className=\"transactions\">\n            <h3>Transaction History</h3>\n            <ul className=\"transaction-ul\">\n                {props.children}\n            </ul>\n        </div>\n    )\n}\n","import React, { useState, useEffect } from \"react\";\nimport { useTransition, animated } from \"react-spring\";\nimport { Header } from \"./components/Header\";\nimport { Balance } from \"./components/Balance\";\nimport { AddTransaction } from \"./components/AddTransaction\";\nimport { Transaction } from \"./components/Transaction\";\nimport { Transactions } from \"./components/Transactions\";\nimport \"./App.css\";\n\nconst mockTransactionList = [\n  { id: 1, description: \"Income\", amount: \"1000\" },\n  { id: 2, description: \"Fish\", amount: \"-20\" },\n  { id: 3, description: \"Rent\", amount: \"400\" },\n  { id: 4, description: \"Breakfast\", amount: \"-7\" },\n  { id: 5, description: \"Dog food\", amount: \"-30\" },\n  { id: 6, description: \"Muj's bread\", amount: \"-130\" }\n]\n\nexport default function App() {\n  const [transactionList, setTransactionList] = useState(mockTransactionList);\n  // const [transactionList, setTransactionList] = useState(\n  //   localStorage.getItem(\"transactions\") !== null\n  //     ? JSON.parse(localStorage.getItem(\"transactions\"))\n  //     : []\n  // );\n  const [amounts, setAmounts] = useState([]);\n\n  const transitions = useTransition(\n    transactionList,\n    transaction => transaction.id,\n    {\n      from: { opacity: 0, marginLeft: 200 },\n      enter: { opacity: 1, marginLeft: 0 },\n      leave: { opacity: 0, marginLeft: -200 },\n      trail: 200\n    }\n  );\n\n  useEffect(() => {\n    setAmounts(\n      transactionList.map(transaction => parseInt(transaction.amount))\n    );\n    localStorage.setItem(\"transactions\", JSON.stringify(transactionList));\n  }, [transactionList]);\n\n  const handleAddTransaction = newTransaction => {\n    setTransactionList([newTransaction, ...transactionList]);\n  };\n\n  const handleDeleteTransaction = id => {\n    setTransactionList(\n      transactionList.filter(transaction => transaction.id !== id)\n    );\n  };\n  return (\n    <>\n      <Header />\n      <div className=\"container\">\n        <Balance amounts={amounts} />\n        <Transactions>\n          {transactionList.length !== 0 ? (\n            transitions.map(({ item: transaction, props, key }) => (\n              <animated.div key={key} style={props}>\n                <Transaction\n                  transaction={transaction}\n                  handleDeleteTransaction={handleDeleteTransaction}\n                />\n              </animated.div>\n            ))\n          ) : (\n            <p className=\"transaction text-center\">Please add history below</p>\n          )}\n        </Transactions>\n        <AddTransaction handleAddTransaction={handleAddTransaction} />\n      </div>\n    </>\n  );\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}